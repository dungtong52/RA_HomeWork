create database db_movie_management;
use db_movie_management;

create table accounts
(
    id       bigint primary key auto_increment,
    username varchar(100)                        not null unique,
    password varchar(100)                        not null,
    role     enum ('ADMIN', 'STAFF', 'CUSTOMER') not null default 'customer',
    status   boolean                                      default true
);

create table customers
(
    id         bigint primary key auto_increment,
    account_id bigint       not null unique,
    full_name  varchar(100) not null,
    phone      varchar(30)  not null unique,
    email      varchar(100),
    address    varchar(250),
    gender     enum ('MALE', 'FEMALE', 'OTHER'),
    foreign key (account_id) references accounts (id)
);

create table movies
(
    id          bigint primary key auto_increment,
    title       varchar(250) not null,
    director    varchar(100),
    genre       varchar(100),
    description text,
    duration    int,
    language    varchar(100)
);

create table screen_rooms
(
    id               bigint primary key auto_increment,
    screen_room_name varchar(100) not null,
    total_seat       int          not null
);

create table schedules
(
    id              bigint primary key auto_increment,
    movie_id        bigint   not null,
    screen_room_id  bigint   not null,
    show_time       datetime not null,
    format          varchar(30),
    available_seats int,
    foreign key (movie_id) references movies (id),
    foreign key (screen_room_id) references screen_rooms (id)
);

create table tickets
(
    id           bigint primary key auto_increment,
    schedule_id  bigint      not null,
    account_id   bigint      not null,
    seat_number  varchar(10) not null,
    booking_time datetime default current_timestamp,
    foreign key (schedule_id) references schedules (id),
    foreign key (account_id) references accounts (id),
    unique (schedule_id, seat_number)
);

# Đăng nhập
DELIMITER //

create procedure get_account_by_user(
    in_user_name varchar(100),
    in_password varchar(100)
)
begin
    select id, username, role, status
    from accounts
    where username = in_user_name
      and password = in_password;
end //

DELIMITER ;

# MOVIE MANAGEMENT
DELIMITER //

create procedure get_all_movies()
begin
    select * from movies;
end //

create procedure create_movie(
    in_title varchar(250),
    in_director varchar(100),
    in_genre varchar(100),
    in_description text,
    in_duration int,
    in_language varchar(100)
)
begin
    insert into movies(title, director, genre, description, duration, language)
    values (in_title, in_director, in_genre, in_description, in_duration, in_language);
end //

create procedure get_movie_by_id(
    in_id bigint
)
begin
    select * from movies where id = in_id;
end //

create procedure update_movie(
    in_id bigint,
    in_title varchar(250),
    in_director varchar(100),
    in_genre varchar(100),
    in_description text,
    in_duration int,
    in_language varchar(100)
)
begin
    update movies
    set title       = in_title,
        director    = in_director,
        genre       = in_genre,
        description = in_description,
        duration    = in_duration,
        language    = in_language
    where id = in_id;
end //

create procedure delete_movie(
    in_id bigint
)
begin
    delete from movies where id = in_id;
end //

DELIMITER ;

# SCHEDULE MANAGEMENT
DELIMITER //

create procedure get_all_schedules()
begin
    select * from schedules;
end //

create procedure create_schedule(
    in_movie_id bigint,
    in_screen_room_id bigint,
    in_show_time datetime,
    in_format varchar(30)
)
begin
    declare v_available_seats int;
    select total_seat into v_available_seats from screen_rooms where id = in_screen_room_id;

    insert into schedules(movie_id, screen_room_id, show_time, format, available_seats)
    values (in_movie_id, in_screen_room_id, in_show_time, in_format, v_available_seats);
end //

create procedure get_schedule_by_id(
    in_id bigint
)
begin
    select * from schedules where id = in_id;
end //

create procedure update_schedule(
    in_id bigint,
    in_movie_id bigint,
    in_screen_room_id bigint,
    in_show_time datetime,
    in_format varchar(30)
)
begin
    update schedules
    set movie_id       = in_movie_id,
        screen_room_id = in_screen_room_id,
        show_time      = in_show_time,
        format         = in_format
    where id = in_id;
end //

create procedure delete_schedule(
    in_id bigint
)
begin
    delete from schedules where id = in_id;
end //

DELIMITER ;

# SHOW MOVIE
DELIMITER //

create procedure show_movie_with_showtime()
begin
    select m.id as movie_id
         , m.title
         , m.director
         , m.genre
         , m.description
         , m.duration
         , m.language
         , s.id
         , s.screen_room_id
         , s.show_time
         , s.format
         , s.available_seats
    from movies m
             join schedules s on m.id = s.movie_id
    order by m.id, s.show_time;
end //

create procedure get_screen_room_by_schedule_id(
    in_schedule_id bigint
)
begin
    select sr.*
    from screen_rooms sr
             join schedules s
                  on sr.id = s.screen_room_id
                      and s.id = in_schedule_id;
end //

DELIMITER ;

# TICKET
DELIMITER //
create procedure get_seat_by_schedule_id(
    in_schedule_id bigint
)
begin
    select seat_number from tickets where schedule_id = in_schedule_id;
end //

create procedure book_ticket(
    in p_schedule_id bigint,
    in p_account_id bigint,
    in p_seat_number varchar(10)
)
begin
    -- Thêm vé
    insert into tickets(schedule_id, account_id, seat_number)
    values (p_schedule_id, p_account_id, p_seat_number);

    -- giảm số ghế còn lại
    update schedules
    set available_seats = available_seats - 1
    where id = p_schedule_id;
end //

DELIMITER ;

# DATA
insert into accounts (username, password, role)
values ('admin', 'admin123', 'ADMIN'),
       ('staff1', 'staff123', 'STAFF'),
       ('customer1', 'pass123', 'CUSTOMER'),
       ('customer2', 'pass456', 'CUSTOMER');

insert into customers (account_id, full_name, phone, email, address, gender)
values (3, 'Nguyễn Văn A', '0912345678', 'a@example.com', 'Hà Nội', 'MALE'),
       (4, 'Trần Thị B', '0987654321', 'b@example.com', 'TP.HCM', 'FEMALE');

insert into movies (title, director, genre, description, duration, language)
values ('Avengers: Endgame', 'Anthony Russo', 'Action', 'Superhero team fights evil.', 180, 'English'),
       ('Your Name', 'Makoto Shinkai', 'Romance', 'A body-swapping romance drama.', 110, 'Japanese');

insert into screen_rooms (screen_room_name, total_seat)
values ('Phòng Chiếu 1', 80),
       ('Phòng Chiếu 2', 100);
-- Lịch chiếu Avengers ở Phòng 1
insert into schedules (movie_id, screen_room_id, show_time, format, available_seats)
values (1, 1, '2025-08-05 19:00:00', '2D', 80);

-- Lịch chiếu Your Name ở Phòng 2
insert into schedules (movie_id, screen_room_id, show_time, format, available_seats)
values (2, 2, '2025-08-05 20:30:00', '3D', 100);
-- customer1 đặt ghế A1, A2 cho Avengers
insert into tickets (schedule_id, account_id, seat_number)
values (1, 3, 'A1'),
       (1, 3, 'A2');

-- customer2 đặt ghế B1 cho Your Name
insert into tickets (schedule_id, account_id, seat_number)
values (2, 4, 'B1');

